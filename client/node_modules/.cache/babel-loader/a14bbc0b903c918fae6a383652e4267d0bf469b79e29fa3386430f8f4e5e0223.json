{"ast":null,"code":"/**\n * Service for handling payment-related API calls\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000/api';\n\n/**\n * Process a payment with the Worldpay session\n * @param session The Worldpay session token\n * @param amount The payment amount\n * @param currency The payment currency (default: GBP)\n * @returns Promise with the payment result\n */\nexport const processPayment = async (session, amount, currency = 'GBP') => {\n  try {\n    console.log(`Processing payment with session: ${session}`);\n    const response = await fetch(`${API_URL}/payments/process`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session,\n        amount,\n        currency\n      })\n    });\n    const responseData = await response.json();\n    if (!response.ok) {\n      console.error('Payment API error:', responseData);\n      throw new Error(responseData.error || 'Payment processing failed');\n    }\n    return responseData;\n  } catch (error) {\n    console.error('Payment service error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","processPayment","session","amount","currency","console","log","response","fetch","method","headers","body","JSON","stringify","responseData","json","ok","error","Error"],"sources":["/Users/Simon/Projects/worldpay/checkout/client/src/services/paymentService.ts"],"sourcesContent":["/**\n * Service for handling payment-related API calls\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000/api';\n\n/**\n * Process a payment with the Worldpay session\n * @param session The Worldpay session token\n * @param amount The payment amount\n * @param currency The payment currency (default: GBP)\n * @returns Promise with the payment result\n */\nexport const processPayment = async (\n  session: string,\n  amount: number,\n  currency: string = 'GBP'\n): Promise<any> => {\n  try {\n    console.log(`Processing payment with session: ${session}`);\n    \n    const response = await fetch(`${API_URL}/payments/process`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        session,\n        amount,\n        currency,\n      }),\n    });\n\n    const responseData = await response.json();\n    \n    if (!response.ok) {\n      console.error('Payment API error:', responseData);\n      throw new Error(responseData.error || 'Payment processing failed');\n    }\n\n    return responseData;\n  } catch (error) {\n    console.error('Payment service error:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAC5BC,OAAe,EACfC,MAAc,EACdC,QAAgB,GAAG,KAAK,KACP;EACjB,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oCAAoCJ,OAAO,EAAE,CAAC;IAE1D,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,mBAAmB,EAAE;MAC1DY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBX,OAAO;QACPC,MAAM;QACNC;MACF,CAAC;IACH,CAAC,CAAC;IAEF,MAAMU,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAE1C,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChBX,OAAO,CAACY,KAAK,CAAC,oBAAoB,EAAEH,YAAY,CAAC;MACjD,MAAM,IAAII,KAAK,CAACJ,YAAY,CAACG,KAAK,IAAI,2BAA2B,CAAC;IACpE;IAEA,OAAOH,YAAY;EACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}