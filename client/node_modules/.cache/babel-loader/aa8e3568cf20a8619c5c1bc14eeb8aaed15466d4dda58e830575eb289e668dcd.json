{"ast":null,"code":"/**\n * Service for handling payment query API calls\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000/api';\n\n/**\n * Query payments with the given parameters\n * @param params Query parameters\n * @returns Promise with the query result\n */\nexport const queryPayments = async params => {\n  try {\n    // Build query string from parameters\n    const queryParams = new URLSearchParams();\n\n    // Add required parameters\n    queryParams.append('startDate', params.startDate);\n    queryParams.append('endDate', params.endDate);\n\n    // Add optional parameters if provided\n    if (params.pageSize) queryParams.append('pageSize', params.pageSize.toString());\n    if (params.currency) queryParams.append('currency', params.currency);\n    if (params.minAmount) queryParams.append('minAmount', params.minAmount.toString());\n    if (params.maxAmount) queryParams.append('maxAmount', params.maxAmount.toString());\n    if (params.last4Digits) queryParams.append('last4Digits', params.last4Digits);\n    if (params.entityReferences) queryParams.append('entityReferences', params.entityReferences);\n    if (params.receivedEvents) queryParams.append('receivedEvents', params.receivedEvents);\n    console.log(`Querying payments with parameters: ${queryParams.toString()}`);\n    const response = await fetch(`${API_URL}/payments/query?${queryParams.toString()}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const responseData = await response.json();\n    if (!response.ok) {\n      console.error('Payment query API error:', responseData);\n      throw new Error(responseData.error || 'Payment query failed');\n    }\n    return responseData;\n  } catch (error) {\n    console.error('Payment query service error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","queryPayments","params","queryParams","URLSearchParams","append","startDate","endDate","pageSize","toString","currency","minAmount","maxAmount","last4Digits","entityReferences","receivedEvents","console","log","response","fetch","method","headers","responseData","json","ok","error","Error"],"sources":["/Users/Simon/Projects/worldpay/checkout/client/src/services/paymentQueryService.ts"],"sourcesContent":["/**\n * Service for handling payment query API calls\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000/api';\n\n/**\n * Query payments with the given parameters\n * @param params Query parameters\n * @returns Promise with the query result\n */\nexport const queryPayments = async (params: {\n  startDate: string;\n  endDate: string;\n  pageSize?: number;\n  currency?: string;\n  minAmount?: number;\n  maxAmount?: number;\n  last4Digits?: string;\n  entityReferences?: string;\n  receivedEvents?: string;\n}): Promise<any> => {\n  try {\n    // Build query string from parameters\n    const queryParams = new URLSearchParams();\n    \n    // Add required parameters\n    queryParams.append('startDate', params.startDate);\n    queryParams.append('endDate', params.endDate);\n    \n    // Add optional parameters if provided\n    if (params.pageSize) queryParams.append('pageSize', params.pageSize.toString());\n    if (params.currency) queryParams.append('currency', params.currency);\n    if (params.minAmount) queryParams.append('minAmount', params.minAmount.toString());\n    if (params.maxAmount) queryParams.append('maxAmount', params.maxAmount.toString());\n    if (params.last4Digits) queryParams.append('last4Digits', params.last4Digits);\n    if (params.entityReferences) queryParams.append('entityReferences', params.entityReferences);\n    if (params.receivedEvents) queryParams.append('receivedEvents', params.receivedEvents);\n    \n    console.log(`Querying payments with parameters: ${queryParams.toString()}`);\n    \n    const response = await fetch(`${API_URL}/payments/query?${queryParams.toString()}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const responseData = await response.json();\n    \n    if (!response.ok) {\n      console.error('Payment query API error:', responseData);\n      throw new Error(responseData.error || 'Payment query failed');\n    }\n\n    return responseData;\n  } catch (error) {\n    console.error('Payment query service error:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAUnC,IAAmB;EAClB,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;;IAEzC;IACAD,WAAW,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACI,SAAS,CAAC;IACjDH,WAAW,CAACE,MAAM,CAAC,SAAS,EAAEH,MAAM,CAACK,OAAO,CAAC;;IAE7C;IACA,IAAIL,MAAM,CAACM,QAAQ,EAAEL,WAAW,CAACE,MAAM,CAAC,UAAU,EAAEH,MAAM,CAACM,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC/E,IAAIP,MAAM,CAACQ,QAAQ,EAAEP,WAAW,CAACE,MAAM,CAAC,UAAU,EAAEH,MAAM,CAACQ,QAAQ,CAAC;IACpE,IAAIR,MAAM,CAACS,SAAS,EAAER,WAAW,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACS,SAAS,CAACF,QAAQ,CAAC,CAAC,CAAC;IAClF,IAAIP,MAAM,CAACU,SAAS,EAAET,WAAW,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACU,SAAS,CAACH,QAAQ,CAAC,CAAC,CAAC;IAClF,IAAIP,MAAM,CAACW,WAAW,EAAEV,WAAW,CAACE,MAAM,CAAC,aAAa,EAAEH,MAAM,CAACW,WAAW,CAAC;IAC7E,IAAIX,MAAM,CAACY,gBAAgB,EAAEX,WAAW,CAACE,MAAM,CAAC,kBAAkB,EAAEH,MAAM,CAACY,gBAAgB,CAAC;IAC5F,IAAIZ,MAAM,CAACa,cAAc,EAAEZ,WAAW,CAACE,MAAM,CAAC,gBAAgB,EAAEH,MAAM,CAACa,cAAc,CAAC;IAEtFC,OAAO,CAACC,GAAG,CAAC,sCAAsCd,WAAW,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC;IAE3E,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGtB,OAAO,mBAAmBM,WAAW,CAACM,QAAQ,CAAC,CAAC,EAAE,EAAE;MAClFW,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAE1C,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;MAChBR,OAAO,CAACS,KAAK,CAAC,0BAA0B,EAAEH,YAAY,CAAC;MACvD,MAAM,IAAII,KAAK,CAACJ,YAAY,CAACG,KAAK,IAAI,sBAAsB,CAAC;IAC/D;IAEA,OAAOH,YAAY;EACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}